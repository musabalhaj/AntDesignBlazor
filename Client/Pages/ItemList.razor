@page "/items"
@inject IItemService ItemService
@inject ModalService _modalService

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Home</BreadcrumbItem>
        <BreadcrumbItem>Items</BreadcrumbItem>
    </Breadcrumb>
</div>
<hr />
<a class="btn btn-info btn-sm btn-flat mb-2 pull-right" href="createitem">
    <i class="oi oi-plus"></i> New Item
</a>


<Card Hoverable Title="Items List">

    <Table DataSource="Items" PageSize="10" Class="table table-responsive" Loading="_loading"
           RowExpandable="@((item)=>item.Data.Description!="Not Expandable")">
        <RowTemplate>
            <Column @bind-Field="@context.Name"></Column>
            <Column @bind-Field="@context.Price"></Column>
            <Column @bind-Field="@context.Quantaty"></Column>
            <Column @bind-Field="@context.CategoryId" Title="Category">@context.Category.Name</Column>
            <ActionColumn Title="Action">
                <Space>
                    <SpaceItem>
                        <a class="btn btn-info btn-flat m-1" href="@($"displayitem/{context.Id}")">
                            <Icon Type="eye" Theme="outline" />
                        </a>
                        <a class="btn btn-success btn-flat m-1" href="@($"edititem/{context.Id}")">
                            <Icon Type="edit" Theme="outline" />
                        </a>
                        <Button Danger OnClick="@(()=>{ _visible = true; _Id = context.Id; })">
                            <Icon Type="delete" Theme="outline" />
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </RowTemplate>
        <ExpandTemplate>
            @context.Data.Description
        </ExpandTemplate>
    </Table>

</Card>


<Modal Title="@_title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       DestroyOnClose="true"
       OkType="danger">
    Do you want to Delete This Item?
</Modal>

@code{
    [CascadingParameter]
    public Error Error { get; set; }

    bool _loading;
    public List<Item> Items { get; set; } = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Items = (await ItemService.GetItems()).ToList();
            _loading = false;
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }
    }

    string _title = "Delete Confirmation";
    bool _visible = false;
    int _Id;

    private async Task HandleOk(MouseEventArgs e)
    {
        try
        {
            await ItemService.DeleteItem(_Id);
            Items = (await ItemService.GetItems()).ToList();
            _visible = false;
            HandleSuccess();
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void HandleSuccess()
    {
        _modalService.Success(new ConfirmOptions()
        {
            Title = "Success",
            Content = "Item Deleted Successfully.",
            OnOk = OnOkClick
        });
    }
    private Func<ModalClosingEventArgs, Task> OnOkClick = async (e) =>
    {
        await Task.Delay(1000);
    };

}
