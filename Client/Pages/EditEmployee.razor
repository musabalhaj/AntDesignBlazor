@page "/editemployee/{id:int}"
@inject IEmployeeViewModel EmployeeViewModel
@inject NavigationManager NavigationManager
@inject IDepartmentVeiwModel DepartmentVeiwModel

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Home</BreadcrumbItem>
        <BreadcrumbItem Href="/employees">Employees</BreadcrumbItem>
        <BreadcrumbItem>Edit</BreadcrumbItem>
    </Breadcrumb>
</div>
<hr />
<Card Hoverable Title="Edit Employee" Loading="_loading">
    <Form Model="@Employee"
          OnFinish="HamdleValidSubmit"
          Layout="vertical">
        <FormItem Label="First Name">
            <Input @bind-Value="@context.FirstName" />
        </FormItem>
        <FormItem Label="Last Name">
            <Input @bind-Value="@context.LastName" />
        </FormItem>
        <FormItem Label="Email">
            <Input @bind-Value="@context.Email" />
        </FormItem>
        <FormItem Label="Gender">
            <EnumSelect TEnum="Gender" @bind-Value="@context.Gender" />
        </FormItem>
        <FormItem Label="Department">
            <Select DataSource="@Departments"
                    DefaultActiveFirstOption="false"
                    ValueName="@nameof(Department.DepartmentId)"
                    LabelName="@nameof(Department.DepartmentName)"
                    @bind-Value="@context.DepartmentId"
                    EnableSearch
                    AllowClear
                    Loading="@_loading">
            </Select>
        </FormItem>
        <FormItem Label="Birth Date" Required>
            <DatePicker DefaultPickerValue="DateTime.Now" @bind-Value="@context.DateOfBirth" />
        </FormItem>
        <FormItem Label="Image" Required>
            <InputFile OnChange="OnFileChange" /> <Avatar Src="@context.PhotoPath"></Avatar>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Update
            </Button>
        </FormItem>
    </Form>
</Card>

@code{
    [CascadingParameter]
    public Error Error { get; set; }

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }
    public Employee Employee { get; set; } = new Employee();
    bool _loading;

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            _loading = true;
            Employee = await EmployeeViewModel.GetEmployee(Id);
            _loading = false;
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }
    }

    public List<Department> Departments { get; set; } = new List<Department>();
    public Department Department { get; set; } = new Department();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Departments = (await DepartmentVeiwModel.GetDepartments()).ToList();
            _loading = false;
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }

    protected async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "images/png";
        var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        Employee.PhotoPath = imageData;
        await OnChange.InvokeAsync(Employee.PhotoPath);
    }

    protected async Task HamdleValidSubmit()
    {
        try
        {
            var result = await EmployeeViewModel.UpdateEmployee(Employee);
            if (result != null)
            {
                EmployeeViewModel.HandleSuccessUpdate();
            }
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }

}