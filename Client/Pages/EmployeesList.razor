@page "/employees"
@inject IEmployeeViewModel EmployeeViewModel
@inject NavigationManager NavigationManager

<Breadcrumb>
    <BreadcrumbItem Href="/">Home</BreadcrumbItem>
    <BreadcrumbItem>Employees</BreadcrumbItem>
</Breadcrumb>
<Divider />


<Button Type="@ButtonType.Primary" OnClick="@(() => NavigationManager.NavigateTo("createemployee"))" Icon="plus">
    New Employee
</Button>

<Card Hoverable Title="Employees List">

    <Search OnSearch="OnSearchChange" @bind-Value="Name" />

    <Table DataSource="Employees.Skip((pageIndex-1)*pageSize).Take(pageSize)" Size="TableSize.Small" Class="table table-responsive"
           RowExpandable="@((employee) => employee.Data.FirstName != "Not Expandable")" Loading="_loading"
           Bordered PaginationPosition="bottomCenter">
        <RowTemplate>
            <Column @bind-Field="@context.FirstName" Filterable Sortable Title="Full Name" Fixed="left">
                @context.FirstName @context.LastName
            </Column>
            <Column @bind-Field="@context.Email"></Column>
            <Column @bind-Field="@context.Gender" TData="Gender" Filterable></Column>
            <Column @bind-Field="@context.DateOfBirth" TData="DateTime" Format="dd/MM/yyy" Filterable>
                @context.DateOfBirth.ToLongDateString()
            </Column>
            <ActionColumn Title="Actions">
                <Space>
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Icon="eye" Color="Color.Blue5"
                                OnClick="@(() => NavigationManager.NavigateTo($"displayemployee/{context.EmployeeId}"))">
                        </Button>

                        <Button Type="@ButtonType.Link" Icon="edit" Color="Color.Green5"
                                OnClick="@(() => NavigationManager.NavigateTo($"editemployee/{context.EmployeeId}"))">
                        </Button>

                        <Button Type="@ButtonType.Link" Icon="delete" Color="Color.Red5"
                                OnClick="@(() => { _visible = true; _Id = context.EmployeeId; })">
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </RowTemplate>
        <ExpandTemplate>
            Department :  @context.Data.Department.DepartmentName
        </ExpandTemplate>
        <PaginationTemplate>
            <Pagination Total="@total"
                        PageSize="pageSize"
                        Current="pageIndex"
                        ShowSizeChanger="@true"
                        Size="small"
                        ShowQuickJumper
                        OnChange="HandlePageChange"
                        HideOnSinglePage />
        </PaginationTemplate>
    </Table>

</Card>

<Modal Title="@_title" Visible="@_visible" OnOk="@HandleOk" OnCancel="@HandleCancel" DestroyOnClose="true" OkType="danger">
    Do you want to Delete This Employee?
</Modal>

@code{
    [CascadingParameter]
    public Error Error { get; set; }

    bool _loading;
    public List<Employee> Employees { get; set; } = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Employees = (await EmployeeViewModel.GetEmployees()).ToList();
            _loading = false;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }

    }

    string _title = "Delete Confirmation";
    bool _visible = false;
    int _Id;

    private async Task HandleOk(MouseEventArgs e)
    {
        try
        {
            await EmployeeViewModel.DeleteEmployee(_Id);
            Employees = (await EmployeeViewModel.GetEmployees()).ToList();
            _visible = false;
            EmployeeViewModel.HandleSuccessDelete();
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }

    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }


    private int total => Employees.Count();
    private int pageSize { get; set; } = 10;
    private int pageIndex { get; set; } = 1;

    private void HandlePageChange(PaginationEventArgs args)
    {
        if (pageIndex != args.Page)
        {
            pageIndex = args.Page;
        }

        if (pageSize != args.PageSize)
        {
            pageSize = args.PageSize;
        }
    }

    private string Name = "";
    private async Task OnSearchChange()
    {
        // use delay if you use onchange()
        //await Task.Delay(1000);

        _loading = true;
        Employees = (await EmployeeViewModel.Search(Name)).ToList();
        _loading = false;
    }
}
