@page "/articals"
@inject IArticalService ArticalService
@inject ModalService _modalService

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Home</BreadcrumbItem>
        <BreadcrumbItem>Articals</BreadcrumbItem>
    </Breadcrumb>
</div>
<hr />
<a class="btn btn-info btn-sm btn-flat mb-2 pull-right" href="createartical">
    <i class="oi oi-plus"></i> New Artical
</a>


<Card Hoverable Title="Articals List">

    <Table DataSource="Articals" PageSize="10" Class="table table-responsive" Loading="_loading">
        <Column @bind-Field="@context.Title" Sortable></Column>
        <Column @bind-Field="@context.Author"></Column>
        <Column @bind-Field="@context.CategoryId" Title="Category">@context.Category.Name</Column>
        <ActionColumn Title="Action">
            <Space>
                <SpaceItem>
                    <a class="btn btn-info btn-flat m-1" href="@($"displayartical/{context.Id}")">
                        <Icon Type="eye" Theme="outline" />
                    </a>
                    <a class="btn btn-success btn-flat m-1" href="@($"editartical/{context.Id}")">
                        <Icon Type="edit" Theme="outline" />
                    </a>
                    <Button Danger OnClick="@(()=>{ _visible = true; _Id = context.Id; })">
                        <Icon Type="delete" Theme="outline" />
                    </Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>

</Card>


<Modal Title="@_title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       DestroyOnClose="true"
       OkType="danger">
    Do you want to Delete This Artical?
</Modal>

@code{
    [CascadingParameter]
    public Error Error { get; set; }

    bool _loading;
    public List<Artical> Articals { get; set; } = new List<Artical>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Articals = (await ArticalService.GetArticals()).ToList();
            _loading = false;
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }
    }

    string _title = "Delete Confirmation";
    bool _visible = false;
    int _Id;

    private async Task HandleOk(MouseEventArgs e)
    {
        try
        {
            await ArticalService.DeleteArtical(_Id);
            Articals = (await ArticalService.GetArticals()).ToList();
            _visible = false;
            HandleSuccess();
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void HandleSuccess()
    {
        _modalService.Success(new ConfirmOptions()
        {
            Title = "Success",
            Content = "Artical Deleted Successfully.",
            OnOk = OnOkClick
        });
    }
    private Func<ModalClosingEventArgs, Task> OnOkClick = async (e) =>
    {
        await Task.Delay(1000);
    };

}
