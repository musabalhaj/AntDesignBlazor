@page "/createpurchases"
@inject IPurchasesViewModel PurchasesViewModel
@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Home</BreadcrumbItem>
        <BreadcrumbItem Href="/purchases">Purchases</BreadcrumbItem>
        <BreadcrumbItem>New</BreadcrumbItem>
    </Breadcrumb>
</div>
<hr />
<Card Hoverable Title="New Purchases" Loading="_loading">
    <Form Model="@Purchases"
          OnFinish="HandleValidSubmit"
          Layout="vertical">
        <ValidationSummary />
        <FormItem Label="Item Name">
            <Input @bind-Value="@context.ItemName" />
        </FormItem>
        <FormItem Label="Description">
            <InputTextArea @bind-Value="@context.Description" />
        </FormItem>
        <FormItem Label="Price">
            <Input @bind-Value="@context.Price" />
        </FormItem>
        <FormItem Label="Quantaty">
            <Input @bind-Value="@context.Quantaty" />
        </FormItem>
        <FormItem Label="Date">
            <DatePicker DefaultValue="DateTime.Today" @bind-Value="@context.Date" />
        </FormItem>
        <FormItem Label="Category">
            <Select DataSource="@Categories"
                    Placeholder="Please Select Category ..."
                    DefaultActiveFirstOption="false"
                    ValueName="@nameof(Category.Id)"
                    LabelName="@nameof(Category.Name)"
                    @bind-Value="@context.CategoryId"
                    EnableSearch
                    AllowClear>
            </Select>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Create
            </Button>
        </FormItem>
    </Form>
</Card>
@code{
    [CascadingParameter]
    public Error Error { get; set; }

    public List<Category> Categories { get; set; } = new List<Category>();
    public Category Category { get; set; } = new Category();
    public Purchases Purchases { get; set; } = new Purchases();
    bool _loading;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            Categories = (await CategoryService.GetCategories()).ToList();
            _loading = false;
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }


    protected async Task HandleValidSubmit()
    {
        try
        {
            var result = await PurchasesViewModel.CreatePurchases(Purchases);
            if (result != null)
            {
                PurchasesViewModel.HandleSuccessCreate();
            }
        }
        catch (Exception ex)
        {

            Error.ProcessError(ex);
        }

    }

}